#
# Templated nais.yml for all apps in all clusters.
#
# Replace <app_name> and <cluster_file> and run the deploy tool in dry run mode
# from the repo root to see the results:
#
#docker run --rm -it -v $(PWD)/config:/config \
#  -e CLUSTER="" \
#  -e VAR="team=tbd,app=<app_name>" \
#  ghcr.io/nais/deploy/deploy:latest /app/deploy \
#  --dry-run \
#  --print-payload \
#  --resource /config/nais.yml \
#  --vars /config/<app_name>/<cluster_file>.yml \
#  --apikey ""

apiVersion: nais.io/v1alpha1
kind: Application
metadata:
  name: sparkel-{{app}}
  namespace: tbd
  labels:
    team: tbd
spec:
  image: {{image}}
  port: 8080
  {{#if ingress}}
  ingresses:
    - {{ingress}}
  {{/if}}
  liveness:
    path: isalive
    initialDelay: 5
  readiness:
    path: isready
    initialDelay: 5
  preStopHook:
    http:
      path: /stop
  observability:
    autoInstrumentation:
      enabled: true
      runtime: java
    logging:
      destinations:
        - id: elastic
        - id: loki
  resources:
    limits:
      memory: {{#if limits.memory }}{{ limits.memory }}{{else}}1Gi{{/if}}
      {{#if limits.cpu }}
      cpu: {{ limits.cpu }}
      {{/if}}
    requests:
      cpu: {{#if requests.cpu }}{{ requests.cpu }}{{else}}50m{{/if}}
      memory: {{#if requests.memory }}{{ requests.memory }}{{else}}320Mi{{/if}}
  replicas:
    min: {{#if replicas.min }}{{ replicas.min }}{{else}}2{{/if}}
    max: {{#if replicas.max }}{{ replicas.max }}{{else}}8{{/if}}
    cpuThresholdPercentage: {{#if replicas.cpuThresholdPercentage }}{{ replicas.cpuThresholdPercentage }}{{else}}400{{/if}}
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 2
  {{#if kafkaPool}}
  kafka:
    pool: {{ kafkaPool }}
  {{/if}}
  {{#if azure}}
  azure:
    application:
      enabled: {{azure.enabled}}
      {{#if azure.tenant}}
      tenant: {{azure.tenant}}
      {{/if}}
  {{/if}}
  prometheus:
    enabled: true
    path: /metrics
  webproxy: true
  secureLogs:
    enabled: true
  vault:
    enabled: true
    {{#if mountPaths}}
    paths:
    {{# each mountPaths as |item| }}
      - mountPath: {{ item.mountPath }}
        kvPath: {{ item.kvPath }}
    {{/each}}
    {{/if}}
  {{#if envFrom}}
  envFrom:
  {{# each envFrom as |item| }}
  - secret: {{item}}
  {{/each}}{{/if}}
  env:
  - name: KAFKA_CONSUMER_GROUP_ID
    value: {{#if kafkaConsumerGroup }}{{ kafkaConsumerGroup }}{{else}}tbd-sparkel-{{app}}-v1{{/if}}
  - name: KAFKA_RAPID_TOPIC
    value: tbd.rapid.v1
  {{#if env}}{{# each env as |item| }}
  - name: {{ item.name }}
    value: "{{ item.value }}"
  {{/each }}{{/if}}
  {{#if gcp}}
  gcp:
    sqlInstances:
      - type: {{ gcp.type }}
        databases:
          - name: {{ gcp.name }}
            envVarPrefix: {{ gcp.envVarPrefix }}
        tier: {{ gcp.tier }}
  {{/if}}
  {{#if accessPolicy}}
  accessPolicy:
    inbound:
      {{#if accessPolicy.inbound.rules}}
      rules:
        {{# each accessPolicy.inbound.rules as |item|}}
        - application: {{ item.application }}
          namespace: {{ item.namespace }}
          cluster: {{ item.cluster }}
        {{/each}}
      {{/if}}
    outbound:
      {{#if accessPolicy.outbound.external}}
      external:
        {{# each accessPolicy.outbound.external as |item| }}
        - host: {{item.host}}
        {{/each}}
      {{/if}}
      {{#if accessPolicy.outbound.rules}}
      rules:
        {{# each accessPolicy.outbound.rules as |item|}}
        - application: {{ item.application }}
          namespace: {{ item.namespace }}
          {{#if item.cluster}}cluster: {{ item.cluster }}{{/if}}
        {{/each}}
      {{/if}}
  {{/if}}
